# Name of the workflow
name: .NET CI/CD

# Trigger on pushes to main AND on pull requests to main
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    steps:
      # --- SETUP STEPS ---
      
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Required for SonarCloud to analyze history
          fetch-depth: 0

      # Explicitly set up Java (JDK 17) for the SonarScanner
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Step 2: Setup .NET SDK
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          
      # Cache the SonarScanner tool to speed up future runs
      - name: Cache SonarScanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: ./backend/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      # Install SonarScanner only if it's not in the cache
      - name: Install SonarScanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: dotnet tool install dotnet-sonarscanner --tool-path ./.sonar/scanner
        working-directory: backend

      # --- ANALYSIS, BUILD, & TEST STEPS ---

      # Step 3: Begin SonarCloud Analysis
      - name: Begin SonarCloud Scan
        run: ./.sonar/scanner/dotnet-sonarscanner begin /k:"bencukovacs_LeagueManager" /o:"bencukovacs" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        working-directory: backend
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 4: Restore, Build, and Test
      - name: Restore dependencies
        run: dotnet restore LeagueManager.sln
        working-directory: backend
      - name: Build and Analyze solution
        run: dotnet build LeagueManager.sln --configuration Release --no-restore
        working-directory: backend
      - name: Run tests
        run: dotnet test LeagueManager.sln --configuration Release --no-build --verbosity normal
        working-directory: backend
        
      # Step 5: End SonarCloud Analysis
      - name: End SonarCloud Scan
        run: ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        working-directory: backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # --- DOCKER PUSH STEPS (Only run on the main branch, not on pull requests) ---

      # Step 6: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        # This condition ensures this step only runs for pushes to the main branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 7: Build and push Docker image
      - name: Build and push Docker image
      # This condition ensures this step only runs for pushes to the main branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: . # Use the repository root as the context
          file: backend/Dockerfile # Specify the full path to the Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/leaguemanager:latest
            ghcr.io/${{ github.repository_owner }}/leaguemanager:${{ github.sha }}
